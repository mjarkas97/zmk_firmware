/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Mode Left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
            tapping-term-ms = <280>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Mode Right";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            tapping-term-ms = <280>;
        };

        hmlay: hmlay {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Mode Layer";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
            tapping-term-ms = <280>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            // ------------------------------------------------------------------------------------------------------------
            // |  `    |  1  |  2  |  3   |  4   |  5   |                         |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                         |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                         |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |        | ExtPw |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |        | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp GRAVE  &kp N1         &kp N2           &kp N3       &kp N4        &kp N5                                 &kp N6  &kp N7        &kp N8       &kp N9            &kp N0                 &kp BACKSPACE
&kp ESC    &kp Q          &kp W            &kp E        &kp R         &kp T                                  &kp Y   &kp U         &kp I        &kp O             &kp P                  &kp BACKSLASH
&kp TAB    &hml LSHIFT A  &hml LEFT_GUI S  &hml LALT D  &hml LCTRL F  &kp G                                  &kp H   &hmr RCTRL J  &hmr RALT K  &hmr RIGHT_GUI L  &hmr RSHIFT SEMICOLON  &kp APOS
&kp LSHFT  &kp Z          &kp X            &kp C        &kp V         &kp B   &kp C_AL_COFFEE    &kp C_MUTE  &kp N   &kp M         &kp COMMA    &kp DOT           &kp FSLH               &kp RSHFT
                          &kp LGUI         &kp LALT     &kp LCTRL     &mo 1   &kp SPACE          &kp ENTER   &mo 2   &kp RCTRL     &kp RALT     &kp RGUI
            >;

            sensor-bindings =
                <&inc_dec_kp LC(TAB) LS(LC(TAB))>,
                <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        MOD {
            // TODO: Some binds are waiting for shifted keycode support.
            // ------------------------------------------------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // | `     |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&trans         &trans                &trans            &trans      &trans     &trans                               &trans     &trans          &trans    &trans             &trans                 &trans
&kp GRAVE      &kp N1                &kp N2            &kp N3      &kp N4     &kp N5                               &kp N6     &kp N7          &kp N8    &kp N9             &kp N0                 &kp BACKSPACE
&kp BACKSLASH  &kp LEFT_BRACE        &kp LEFT_BRACKET  &kp DELETE  &kp MINUS  &kp PLUS                             &kp EQUAL  &kp UNDERSCORE  &trans    &kp RIGHT_BRACKET  &kp RIGHT_BRACE        &kp SLASH
&kp LSHFT      &kp LEFT_PARENTHESIS  &trans            &trans      &trans     &trans    &kp C_SLEEP    &kp C_MUTE  &trans     &trans          &trans    &trans             &kp RIGHT_PARENTHESIS  &kp RSHFT
                                     &kp LGUI          &kp LALT    &kp LCTRL  &none     &kp SPACE      &kp ENTER   &mo 3      &kp RCTRL       &kp RALT  &kp RGUI
            >;

            sensor-bindings =
                <&inc_dec_kp LC(TAB) LS(LC(TAB))>,
                <&inc_dec_kp LG(TAB) LG(LS(TAB))>;
        };

        FN {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                         &trans     &trans          &trans          &trans        &trans           &trans
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6                         &kp F7     &kp F8          &kp F9          &kp F10       &kp F11          &kp F12
&trans  &trans  &trans  &trans  &trans  &trans                         &kp LEFT   &kp DOWN        &kp UP          &kp RIGHT     &trans           &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp K_POWER    &trans  &mkp LCLK  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &mkp RCLK
                &trans  &trans  &trans  &trans  &trans         &trans  &none      &trans          &trans          &trans
            >;

            sensor-bindings = <&inc_dec_kp LA(TAB) LA(LS(TAB))>;
        };

        CFG {
            bindings = <
&trans           &trans           &trans           &trans           &trans           &trans                             &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR       &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                       &trans  &trans  &trans  &trans  &trans  &trans
&rgb_ug RGB_TOG  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF                    &trans  &trans  &trans  &trans  &trans  &trans
&trans           &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                  &trans           &trans           &trans           &trans           &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
